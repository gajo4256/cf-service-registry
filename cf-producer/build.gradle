/*
 * This file was generated by the Gradle 'init' task.
 */
buildscript {
    ext.kotlin_version = '1.3.61'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    /**
     * To target the JVM, apply the Kotlin JVM plugin. Starting with Kotlin 1.1.1, the plugin can be applied using the
     * Gradle plugins DSL.
     *
     * https://kotlinlang.org/docs/reference/using-gradle.html#targeting-the-jvm => Targeting the JVM
     */
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    /**
     * Spring AOP needs classes to be final, which by kotlin definition they are final by default. For that we have two
     * possibilities:
     *  1. buildscript
     *  2. plugin (what we used below)
     *
     *  More details @ https://kotlinlang.org/docs/reference/compiler-plugins.html
     */
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.61"
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    /**
     * Allows us not to explicitly set spring-boot-starter version numbers, instead it manages it for us.
     * More details @ https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#managing-dependencies
     */
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id 'application'
}

group = 'com.gajo.dontexist'
version = '0.0.1-SNAPSHOT'
description = 'cf-consumer'
sourceCompatibility = JavaVersion.VERSION_1_8

application {
    /** required for 'application'plugin. When using kotlin class name should have "Kt" at the end, but not as a file
     * suffix, but file name suffix.
     *
     * This is required only when calling "./gradlew clean build" since this is using "a"pplication"plugin, when using
     * spring boot plugin, this can be left out and we could just simply call "./gradlew bootJar
     *
     * More on configuring meta class for spring boot plugin @ https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/
     */
    mainClassName = "com.gajo.dontexist.cfproducer.CfProducerApplicationKt"
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}
compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

repositories {
    jcenter()
}


dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
    compile 'io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry:2.1.4.RELEASE'
    /**
     * 3 Kotlin specific libraries are required for such Spring Boot web application and configured by default:
     *
     *      1. kotlin-stdlib-jdk8 is the Java 8 variant of Kotlin standard library
     *      2. kotlin-reflect is Kotlin reflection library
     *      3. jackson-module-kotlin
     *
     *      More details @ https://github.com/spring-guides/tut-spring-boot-kotlin#using-intellij-idea
     */
    compile 'org.jetbrains.kotlin:kotlin-reflect'
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}



tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
